00 //Outer_Loop_X50:
03 //READ_FROM_MEM_TO_A 0x03 Load Y value from RAM (starting at 0)
01 //READ_FROM_MEM_TO_B 0x10  // Load X = 50 from RAM
10
03 //WRITE_TO_MEM_FROM_B 0xB0 // Send X = 50 to VGA bus
B0
02 //WRITE_TO_MEM_FROM_A 0xB1 // Send Y to VGA bus
B1
00 //READ_FROM_MEM_TO_A 0x06  // Load the foreground color
06
02 //WRITE_TO_MEM_FROM_A 0xB2 // Send color data to VGA bus
B2
00 //READ_FROM_MEM_TO_A 0x03
03
54 //DO_MATHS_OPP_SAVE_IN_A   // A = A + 1
02 //WRITE_TO_MEM_FROM_A 0x03 // Store new Y in RAM
03
01 // READ_FROM_MEM_TO_B 0x20 // Load 120 from RAM to B
20
96 //IF_A_EQUALITY_B_GOTO End_Loop_X50 // If Y == 120, exit loop
17 //End_Loop_X50
07 // GOTO Outer_Loop_X50 // Repeat for the next Y value
00 //Outer_Loop_X50
00 //End_Loop_X50(0x17):
08 // READ_FROM_MEM_TO_A 0x08 //load 0
02 //WRITE_TO_MEM_FROM_A 0x03//reset Y
03
00 //Outer_Loop_X110(0x1B):
03 //READ_FROM_MEM_TO_A 0x03  // Load Y value from RAM (starting at 0)
01 //READ_FROM_MEM_TO_B 0x11  // Load X = 110 from RAM
11
03 //WRITE_TO_MEM_FROM_B 0xB0 // Send X = 110 to VGA bus
B0
02 //WRITE_TO_MEM_FROM_A 0xB1 // Send Y to VGA bus
B1
00 //READ_FROM_MEM_TO_A 0x06  // Load the foreground color
06
02 //WRITE_TO_MEM_FROM_A 0xB2 // Send color data to VGA bus
B2
00 //READ_FROM_MEM_TO_A 0x03
03
54 //DO_MATHS_OPP_SAVE_IN_A   // A = A + 1
02 //WRITE_TO_MEM_FROM_A 0x03 // Store new Y in RAM
03
01 //READ_FROM_MEM_TO_B 0x20 // Load 120 from RAM to B
20
96 //IF_A_EQUALITY_B_GOTO End_Loop_X110 // If Y == 120, exit loop
32 //End_Loop_X110
07 //GOTO Outer_Loop_X110 // Repeat for the next Y value
1B //Outer_Loop_X110
00 //End_Loop_X110 AND Outer_Loop_Y40 (0x32)
02 //READ_FROM_MEM_TO_A 0x02  // Load X value from RAM (starting at 0)
01 //READ_FROM_MEM_TO_B 0x12  // Load Y = 40 from RAM
12
03 //WRITE_TO_MEM_FROM_B 0xB1 // Send Y = 40 to VGA bus
B1
02 //WRITE_TO_MEM_FROM_A 0xB0 // Send X to VGA bus
B0
00 //READ_FROM_MEM_TO_A 0x06  // Load the foreground color
06
02 //WRITE_TO_MEM_FROM_A 0xB2 // Send color data to VGA bus
B2
00 //READ_FROM_MEM_TO_A 0x02
02
54 //DO_MATHS_OPP_SAVE_IN_A   // A = A + 1
02 //WRITE_TO_MEM_FROM_A 0x02 // Store new X in RAM
02
01 //READ_FROM_MEM_TO_B 0x21 // Load 160 from RAM to B
21
96 // IF_A_EQUALITY_B_GOTO End_Loop_Y40 // If X == 160, exit loop
49 //End_Loop_Y40
07 //GOTO Outer_Loop_Y40 // Repeat for the next X value
32 //Outer_Loop_Y40
00 //End_Loop_Y40:(0x49)
08 //READ_FROM_MEM_TO_A 0x08 //load 0
02 //WRITE_TO_MEM_FROM_A 0x02//reset X
02
00 //Outer_Loop_Y80:(0x4D)
02 //READ_FROM_MEM_TO_A 0x02
01 //READ_FROM_MEM_TO_B 0x13  // Load Y = 80 from RAM
13
03 //WRITE_TO_MEM_FROM_B 0xB1 // Send Y = 80 to VGA bus
B1
02 //WRITE_TO_MEM_FROM_A 0xB0 // Send X to VGA bus
B0
00 //READ_FROM_MEM_TO_A 0x06  // Load the foreground color
06
02 // WRITE_TO_MEM_FROM_A 0xB2 // Send color data to VGA bus
B2
00 // READ_FROM_MEM_TO_A 0x02
02
54 //DO_MATHS_OPP_SAVE_IN_A   // A = A + 1
02 //WRITE_TO_MEM_FROM_A 0x02 // Store new X in RAM
02
01 //READ_FROM_MEM_TO_B 0x21 // Load 160 from RAM to B
21
96 //IF_A_EQUALITY_B_GOTO End_Loop_Y80 // If X == 160, exit loop
64 //End_Loop_Y80
07 //GOTO Outer_Loop_Y80 // Repeat for the next X value
4D //Outer_Loop_Y80
08 //End_Loop_Y80:(0x64)
00 //GOTO_IDLE
00
00


