// Loop 1: For fixed X = 50, count Y = 0 to Y = 120

Outer_Loop_X50:
    // Loop through Y values from Y = 0 to Y = 120
    READ_FROM_MEM_TO_A 0x03  // Load Y value from RAM (starting at 0)

    // Draw a vertical line at X = 50 for this Y value
    READ_FROM_MEM_TO_B 0x10  // Load X = 50 from RAM
    WRITE_TO_MEM_FROM_B 0xB0 // Send X = 50 to VGA bus
    WRITE_TO_MEM_FROM_A 0xB1 // Send Y to VGA bus
    READ_FROM_MEM_TO_A 0x06  // Load the foreground color
    WRITE_TO_MEM_FROM_A 0xB2 // Send color data to VGA bus

    // Increment Y (Y++)
    READ_FROM_MEM_TO_A 0x03
    DO_MATHS_OPP_SAVE_IN_A   // A = A + 1
    WRITE_TO_MEM_FROM_A 0x03 // Store new Y in RAM

    // Check if Y == 120 (end of vertical line)
    READ_FROM_MEM_TO_B 0x20 // Load 120 from RAM to B
    IF_A_EQUALITY_B_GOTO End_Loop_X50 // If Y == 120, exit loop

    GOTO Outer_Loop_X50 // Repeat for the next Y value

End_Loop_X50:
    // End of loop for X = 50

// Loop 2: For fixed X = 110, count Y = 0 to Y = 120
//reset Y value
    READ_FROM_MEM_TO_A 0x08 //load 0
    WRITE_TO_MEM_FROM_A 0x03//reset Y


Outer_Loop_X110:
    // Loop through Y values from Y = 0 to Y = 120
    READ_FROM_MEM_TO_A 0x03  // Load Y value from RAM (starting at 0)

    // Draw a vertical line at X = 110 for this Y value
    READ_FROM_MEM_TO_B 0x11  // Load X = 110 from RAM
    WRITE_TO_MEM_FROM_B 0xB0 // Send X = 110 to VGA bus
    WRITE_TO_MEM_FROM_A 0xB1 // Send Y to VGA bus
    READ_FROM_MEM_TO_A 0x06  // Load the foreground color
    WRITE_TO_MEM_FROM_A 0xB2 // Send color data to VGA bus

    // Increment Y (Y++)
    READ_FROM_MEM_TO_A 0x03
    DO_MATHS_OPP_SAVE_IN_A   // A = A + 1
    WRITE_TO_MEM_FROM_A 0x03 // Store new Y in RAM

    // Check if Y == 120 (end of vertical line)
    READ_FROM_MEM_TO_B 0x20 // Load 120 from RAM to B
    IF_A_EQUALITY_B_GOTO End_Loop_X110 // If Y == 120, exit loop

    GOTO Outer_Loop_X110 // Repeat for the next Y value

End_Loop_X110:
    // End of loop for X = 110


// Loop 3: For fixed Y = 40, count X = 0 to X = 160

Outer_Loop_Y40:
    // Loop through X values from X = 0 to X = 160
    READ_FROM_MEM_TO_A 0x02  // Load X value from RAM (starting at 0)

    // Draw a horizontal line at Y = 40 for this X value
    READ_FROM_MEM_TO_B 0x12  // Load Y = 40 from RAM
    WRITE_TO_MEM_FROM_B 0xB1 // Send Y = 40 to VGA bus
    WRITE_TO_MEM_FROM_A 0xB0 // Send X to VGA bus
    READ_FROM_MEM_TO_A 0x06  // Load the foreground color
    WRITE_TO_MEM_FROM_A 0xB2 // Send color data to VGA bus

    // Increment X (X++)
    READ_FROM_MEM_TO_A 0x02
    DO_MATHS_OPP_SAVE_IN_A   // A = A + 1
    WRITE_TO_MEM_FROM_A 0x02 // Store new X in RAM

    // Check if X == 160 (end of horizontal line)
    READ_FROM_MEM_TO_B 0x21 // Load 160 from RAM to B
    IF_A_EQUALITY_B_GOTO End_Loop_Y40 // If X == 160, exit loop

    GOTO Outer_Loop_Y40 // Repeat for the next X value

End_Loop_Y40:
    // End of loop for Y = 40

//reset X value
    READ_FROM_MEM_TO_A 0x08 //load 0
    WRITE_TO_MEM_FROM_A 0x02//reset X

// Loop 4: For fixed Y = 80, count X = 0 to X = 160

Outer_Loop_Y80:
    // Loop through X values from X = 0 to X = 160
    READ_FROM_MEM_TO_A 0x02  // Load X value from RAM (starting at 0)

    // Draw a horizontal line at Y = 80 for this X value
    READ_FROM_MEM_TO_B 0x13  // Load Y = 80 from RAM
    WRITE_TO_MEM_FROM_B 0xB1 // Send Y = 80 to VGA bus
    WRITE_TO_MEM_FROM_A 0xB0 // Send X to VGA bus
    READ_FROM_MEM_TO_A 0x06  // Load the foreground color
    WRITE_TO_MEM_FROM_A 0xB2 // Send color data to VGA bus

    // Increment X (X++)
    READ_FROM_MEM_TO_A 0x02
    DO_MATHS_OPP_SAVE_IN_A   // A = A + 1
    WRITE_TO_MEM_FROM_A 0x02 // Store new X in RAM

    // Check if X == 160 (end of horizontal line)
    READ_FROM_MEM_TO_B 0x21 // Load 160 from RAM to B
    IF_A_EQUALITY_B_GOTO End_Loop_Y80 // If X == 160, exit loop

    GOTO Outer_Loop_Y80 // Repeat for the next X value

End_Loop_Y80:
    // End of loop for Y = 80
